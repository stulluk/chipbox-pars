#ifndef __CSAPI_DEMUX_H__
#define __CSAPI_DEMUX_H__

#ifdef __cplusplus
extern "C" {
#endif

#include "global.h"

#define CSDEMUX_DES_NUM            8
#define CSDEMUX_PIDFT_NUM          64
#define CSDEMUX_CRC_NUM            16

#define CSDEMUX_CHL_NUM            2

#define CSDEMUX_VIDOUT_NUM         2
#define CSDEMUX_AUDOUT_NUM         1

#define CSDEMUX_PCR_NUM            1

#define CSDEMUX_FILTER_NUM         63
// #define CSDEMUX_FILTER_EVENT_NUM   2

#define CSDEMUX_UNVALID_HANDLE     0

typedef void *CSDEMUX_HANDLE;

/* Constant ID define */
typedef enum 
{
	DEMUX_DES_UNDEF = -1,
	DEMUX_DES_ID0 = 0,
	DEMUX_DES_ID1,
	DEMUX_DES_ID2,
	DEMUX_DES_ID3,
	DEMUX_DES_ID4,
	DEMUX_DES_ID5,
	DEMUX_DES_ID6,
	DEMUX_DES_ID7
} CSDEMUX_DES_ID;

typedef enum 
{
	DEMUX_PIDFT_UNDEF = -1,
	DEMUX_PIDFT_ID0 = 0,
	DEMUX_PIDFT_ID1,
	DEMUX_PIDFT_ID2,
	DEMUX_PIDFT_ID3,
	DEMUX_PIDFT_ID4,
	DEMUX_PIDFT_ID5,
	DEMUX_PIDFT_ID6,
	DEMUX_PIDFT_ID7,
	DEMUX_PIDFT_ID8,
	DEMUX_PIDFT_ID9,
	DEMUX_PIDFT_ID10,
	DEMUX_PIDFT_ID11,
	DEMUX_PIDFT_ID12,
	DEMUX_PIDFT_ID13,
	DEMUX_PIDFT_ID14,
	DEMUX_PIDFT_ID15,
	DEMUX_PIDFT_ID16,
	DEMUX_PIDFT_ID17,
	DEMUX_PIDFT_ID18,
	DEMUX_PIDFT_ID19,
	DEMUX_PIDFT_ID20,
	DEMUX_PIDFT_ID21,
	DEMUX_PIDFT_ID22,
	DEMUX_PIDFT_ID23,
	DEMUX_PIDFT_ID24,
	DEMUX_PIDFT_ID25,
	DEMUX_PIDFT_ID26,
	DEMUX_PIDFT_ID27,
	DEMUX_PIDFT_ID28,
	DEMUX_PIDFT_ID29,
	DEMUX_PIDFT_ID30,
	DEMUX_PIDFT_ID31,
	DEMUX_PIDFT_ID32,
	DEMUX_PIDFT_ID33,
	DEMUX_PIDFT_ID34,
	DEMUX_PIDFT_ID35,
	DEMUX_PIDFT_ID36,
	DEMUX_PIDFT_ID37,
	DEMUX_PIDFT_ID38,
	DEMUX_PIDFT_ID39,
	DEMUX_PIDFT_ID40,
	DEMUX_PIDFT_ID41,
	DEMUX_PIDFT_ID42,
	DEMUX_PIDFT_ID43,
	DEMUX_PIDFT_ID44,
	DEMUX_PIDFT_ID45,
	DEMUX_PIDFT_ID46,
	DEMUX_PIDFT_ID47,
	DEMUX_PIDFT_ID48,
	DEMUX_PIDFT_ID49,
	DEMUX_PIDFT_ID50,
	DEMUX_PIDFT_ID51,
	DEMUX_PIDFT_ID52,
	DEMUX_PIDFT_ID53,
	DEMUX_PIDFT_ID54,
	DEMUX_PIDFT_ID55,
	DEMUX_PIDFT_ID56,
	DEMUX_PIDFT_ID57,
	DEMUX_PIDFT_ID58,
	DEMUX_PIDFT_ID59,
	DEMUX_PIDFT_ID60,
	DEMUX_PIDFT_ID61,
	DEMUX_PIDFT_ID62,
	DEMUX_PIDFT_ID63
} CSDEMUX_PIDFT_ID;

typedef enum 
{
	DEMUX_CRC_UNDEF = -1,
	DEMUX_CRC_ID0 = 0,
	DEMUX_CRC_ID1,
	DEMUX_CRC_ID2,
	DEMUX_CRC_ID3,
	DEMUX_CRC_ID4,
	DEMUX_CRC_ID5,
	DEMUX_CRC_ID6,
	DEMUX_CRC_ID7,
	DEMUX_CRC_ID8,
	DEMUX_CRC_ID9,
	DEMUX_CRC_ID10,
	DEMUX_CRC_ID11,
	DEMUX_CRC_ID12,
	DEMUX_CRC_ID13,
	DEMUX_CRC_ID14,
	DEMUX_CRC_ID15
} CSDEMUX_CRC_ID;

typedef enum 
{
	DEMUX_CHL_UNDEF = -1,
	DEMUX_CHL_ID0 = 0,
	DEMUX_CHL_ID1
} CSDEMUX_CHL_ID;

typedef enum 
{
	DEMUX_VIDOUT_UNDEF = -1,
	DEMUX_VIDOUT_ID0 = 0,
	DEMUX_VIDOUT_ID1
} CSDEMUX_VIDOUT_ID;

typedef enum 
{
	DEMUX_AUDOUT_UNDEF = -1,
	DEMUX_AUDOUT_ID0 = 0,
} CSDEMUX_AUDOUT_ID;

typedef enum 
{
	DEMUX_PCRDEV_UNDEF = -1,
	DEMUX_PCRDEV_ID0 = 0,
} CSDEMUX_PCRDEV_ID;

typedef enum 
{
	DEMUX_FILTER_UNDEF = -1,
	DEMUX_FILTER_ID0 = 0,
	DEMUX_FILTER_ID1,
	DEMUX_FILTER_ID2,
	DEMUX_FILTER_ID3,
	DEMUX_FILTER_ID4,
	DEMUX_FILTER_ID5,
	DEMUX_FILTER_ID6,
	DEMUX_FILTER_ID7,
	DEMUX_FILTER_ID8,
	DEMUX_FILTER_ID9,
	DEMUX_FILTER_ID10,
	DEMUX_FILTER_ID11,
	DEMUX_FILTER_ID12,
	DEMUX_FILTER_ID13,
	DEMUX_FILTER_ID14,
	DEMUX_FILTER_ID15,
	DEMUX_FILTER_ID16,
	DEMUX_FILTER_ID17,
	DEMUX_FILTER_ID18,
	DEMUX_FILTER_ID19,
	DEMUX_FILTER_ID20,
	DEMUX_FILTER_ID21,
	DEMUX_FILTER_ID22,
	DEMUX_FILTER_ID23,
	DEMUX_FILTER_ID24,
	DEMUX_FILTER_ID25,
	DEMUX_FILTER_ID26,
	DEMUX_FILTER_ID27,
	DEMUX_FILTER_ID28,
	DEMUX_FILTER_ID29,
	DEMUX_FILTER_ID30,
	DEMUX_FILTER_ID31,
	DEMUX_FILTER_ID32,
	DEMUX_FILTER_ID33,
	DEMUX_FILTER_ID34,
	DEMUX_FILTER_ID35,
	DEMUX_FILTER_ID36,
	DEMUX_FILTER_ID37,
	DEMUX_FILTER_ID38,
	DEMUX_FILTER_ID39,
	DEMUX_FILTER_ID40,
        DEMUX_FILTER_ID41,
        DEMUX_FILTER_ID42,
        DEMUX_FILTER_ID43,
        DEMUX_FILTER_ID44,
        DEMUX_FILTER_ID45,
        DEMUX_FILTER_ID46,
        DEMUX_FILTER_ID47,
        DEMUX_FILTER_ID48,
        DEMUX_FILTER_ID49,
	DEMUX_FILTER_ID50,
        DEMUX_FILTER_ID51,
        DEMUX_FILTER_ID52,
        DEMUX_FILTER_ID53,
        DEMUX_FILTER_ID54,
        DEMUX_FILTER_ID55,
        DEMUX_FILTER_ID56,
        DEMUX_FILTER_ID57,
        DEMUX_FILTER_ID58,
        DEMUX_FILTER_ID59,
	DEMUX_FILTER_ID60,
        DEMUX_FILTER_ID61,
        DEMUX_FILTER_ID62,
        DEMUX_FILTER_ID63,
} CSDEMUX_FILTER_ID;

/* DEMUX TYPE define */
typedef enum 
{
	DEMUX_FILTER_TYPE_UNDEF = -1,
	DEMUX_FILTER_TYPE_SEC = 0,
	DEMUX_FILTER_TYPE_TS,
	DEMUX_FILTER_TYPE_PES,
	DEMUX_FILTER_TYPE_ES
} CSDEMUX_FILTER_TYPE;

typedef enum 
{
	DEMUX_DES_TYPE_DVB = 0,
	DEMUX_DES_TYPE_ATSC
} CSDEMUX_DES_TYPE;

typedef enum 
{
	DEMUX_INPUT_MOD_TUNER = 0,
	DEMUX_INPUT_MOD_DMA,
	DEMUX_INPUT_MOD_DIRECT
} CSDEMUX_INPUT_MOD;

typedef enum 
{
	DEMUX_TUNER_MOD_PARALLEL = 0,
	DEMUX_INPUT_MOD_SERIAL,
} CSDEMUX_TUNER_MOD;

typedef enum 
{
	DEMUX_SWITCH_MOD_CHL0 = 0,
	DEMUX_SWITCH_MOD_CHL1,
	DEMUX_SWITCH_MOD_HOST
} CSDEMUX_SWITCH_MOD;

typedef enum 
{
	DEMUX_OUTPUT_MOD_BLOCK = 0,
	DEMUX_OUTPUT_MOD_NONBLOCK
} CSDEMUX_OUTPUT_MOD;

/* By KB Kim */
typedef enum 
{
	DEMUX_CRC_ERROR = 0,
	DEMUX_SECTION_AVAIL,
	CSDEMUX_FILTER_EVENT_NUM
} CSDEMUX_SECEVENT;

typedef enum 
{ 
	DEMUX_NO_ERROR = 0, 
	DEMUX_ERROR_OPEN_FAILED,	/* open filed                 */
	DEMUX_ERROR_IOCTL_FAILED,	/* ioctl filed                */
	DEMUX_ERROR_INVALID_PARAMETERS,	/* Bad parameter passed       */
	DEMUX_ERROR_UNKNOWN_DEVICE,	/* Unknown device name        */
	DEMUX_ERROR_DEVICE_BUSY,	/* Device is currently busy   */
	DEMUX_ERROR_INVALID_HANDLE,	/* Handle is not valid        */
	DEMUX_ERROR_ALREADY_INITIALIZED,/* Device already initialized */
	DEMUX_ERROR_NOT_INITIALIZED,	/* Device not initialized     */
	DEMUX_ERROR_INVALID_STATUS	/* invalid status	      */
} CSDEMUX_ErrCode;

typedef unsigned long long CSDEMUX_PCRVALUE;

/* function define */
CSAPI_RESULT CSDEMUX_Init(void);
void CSDEMUX_Terminate(void);

/*pid filter interface*/
CSDEMUX_HANDLE CSDEMUX_PIDFT_Open(CSDEMUX_PIDFT_ID pidfilter_id);
CSAPI_RESULT CSDEMUX_PIDFT_Close(CSDEMUX_HANDLE handle);

CSAPI_RESULT CSDEMUX_PIDFT_SetChannel(CSDEMUX_HANDLE handle, CSDEMUX_CHL_ID chl_id);
CSAPI_RESULT CSDEMUX_PIDFT_SetPID(CSDEMUX_HANDLE handle, unsigned short pid);

CSAPI_RESULT CSDEMUX_PIDFT_GetFreeDESNumber(CSDEMUX_HANDLE handle, unsigned int * des_number);
CSAPI_RESULT CSDEMUX_PIDFT_MallocDES(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_PIDFT_FreeDES(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_PIDFT_SetDESOddKey(CSDEMUX_HANDLE handle, const unsigned char *const odd_key);
CSAPI_RESULT CSDEMUX_PIDFT_SetDESEvenKey(CSDEMUX_HANDLE handle, const unsigned char *const even_key);
CSAPI_RESULT CSDEMUX_PIDFT_EnableDES(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_PIDFT_DisableDES(CSDEMUX_HANDLE handle);

CSAPI_RESULT CSDEMUX_PIDFT_Enable(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_PIDFT_Disable(CSDEMUX_HANDLE handle);

/* channel interface */
CSDEMUX_HANDLE CSDEMUX_CHL_Open(CSDEMUX_CHL_ID chl_id);
CSAPI_RESULT CSDEMUX_CHL_Close(CSDEMUX_HANDLE handle);

CSAPI_RESULT CSDEMUX_CHL_SetInputMode(CSDEMUX_HANDLE handle, CSDEMUX_INPUT_MOD input_mod);
CSAPI_RESULT CSDEMUX_CHL_SetTunerInputMode(CSDEMUX_HANDLE handle, CSDEMUX_TUNER_MOD input_mod);
CSAPI_RESULT CSDEMUX_CHL_SetDesType(CSDEMUX_HANDLE handle, CSDEMUX_DES_TYPE des_type);

CSAPI_RESULT CSDEMUX_CHL_Reset(CSDEMUX_HANDLE handle);

CSAPI_RESULT CSDEMUX_CHL_Enable(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_CHL_Disable(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_CHL_ClearBuffer(CSDEMUX_HANDLE hanele);

CSAPI_RESULT CSDEMUX_CHL_DMA_Write(CSDEMUX_HANDLE handle, const unsigned char *const buf, unsigned int len);
CSAPI_RESULT CSDEMUX_CHL_DMA_Reset(CSDEMUX_HANDLE handle);

/* 
 * the below 3 methods for optimizing CHL DMA transfer.
 */
CSAPI_RESULT CSDEMUX_CHL_DMAext_GetWPtr(CSDEMUX_HANDLE handle, void **buff_addr, unsigned int *sz);
CSAPI_RESULT CSDEMUX_CHL_DMAext_Exec(CSDEMUX_HANDLE handle, void *buff_addr, unsigned int sz);
CSAPI_RESULT CSDEMUX_CHL_DMAext_IsHalfEmpty(CSDEMUX_HANDLE handle, int *is_empty);

/* 
 * the below 1 methods for optimizing CHL DMA transfer too.
 * you can take any one of them.
 */
CSAPI_RESULT CSDEMUX_CHL_DMA_GenericWrite(CSDEMUX_HANDLE handle, int (*func) (void *buff, int sz, void *context),
					  unsigned int len, void *context);
/* video output interface */
CSDEMUX_HANDLE CSDEMUX_VID_Open(CSDEMUX_VIDOUT_ID vid_id);
CSAPI_RESULT CSDEMUX_VID_Close(CSDEMUX_HANDLE handle);

CSAPI_RESULT CSDEMUX_VID_SetCPBBuf(CSDEMUX_HANDLE handle, unsigned int cpb_buf_phy_addr, unsigned int cpb_buf_size);
CSAPI_RESULT CSDEMUX_VID_SetDIRBuf(CSDEMUX_HANDLE handle, unsigned int dir_buf_phy_addr, unsigned int dir_buf_size);

CSAPI_RESULT CSDEMUX_VID_SetPID(CSDEMUX_HANDLE handle, unsigned short pid);
CSAPI_RESULT CSDEMUX_VID_SetOutputMode(CSDEMUX_HANDLE handle, CSDEMUX_OUTPUT_MOD block_mod);
CSAPI_RESULT CSDEMUX_VID_SetSwitchMode(CSDEMUX_HANDLE handle, CSDEMUX_SWITCH_MOD sw_mod);
CSAPI_RESULT CSDEMUX_VID_Reset(CSDEMUX_HANDLE handle);

CSAPI_RESULT CSDEMUX_VID_Enable(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_VID_Disable(CSDEMUX_HANDLE handle);

/* audio output interface */
CSDEMUX_HANDLE CSDEMUX_AUD_Open(CSDEMUX_AUDOUT_ID aud_id);
CSAPI_RESULT CSDEMUX_AUD_Close(CSDEMUX_HANDLE handle);

CSAPI_RESULT CSDEMUX_AUD_SetCABBuf(CSDEMUX_HANDLE handle, unsigned int cab_buf_phy_addr, unsigned int cab_buf_size);
CSAPI_RESULT CSDEMUX_AUD_SetPTSBuf(CSDEMUX_HANDLE handle, unsigned int pts_buf_phy_addr, unsigned int pts_buf_size);

CSAPI_RESULT CSDEMUX_AUD_SetPID(CSDEMUX_HANDLE handle, unsigned short pid);
CSAPI_RESULT CSDEMUX_AUD_SetOutputMode(CSDEMUX_HANDLE handle, CSDEMUX_OUTPUT_MOD block_mod);
CSAPI_RESULT CSDEMUX_AUD_SetSwitchMode(CSDEMUX_HANDLE handle, CSDEMUX_SWITCH_MOD sw_mod);
CSAPI_RESULT CSDEMUX_AUD_Reset(CSDEMUX_HANDLE handle);

CSAPI_RESULT CSDEMUX_AUD_Enable(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_AUD_Disable(CSDEMUX_HANDLE handle);

/* PCR interface */
CSDEMUX_HANDLE CSDEMUX_PCR_Open(CSDEMUX_PCRDEV_ID pcr_id);
CSAPI_RESULT CSDEMUX_PCR_Close(CSDEMUX_HANDLE handle);

CSAPI_RESULT CSDEMUX_PCR_SetPID(CSDEMUX_HANDLE handle, unsigned short pid);
CSAPI_RESULT CSDEMUX_PCR_SetSwitchMode(CSDEMUX_HANDLE handle, CSDEMUX_SWITCH_MOD sw_mod);

CSAPI_RESULT CSDEMUX_PCR_Enable(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_PCR_Disable(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_PCR_GetPCR(CSDEMUX_HANDLE handle, CSDEMUX_PCRVALUE *value);

/* Filter interface */
CSDEMUX_HANDLE CSDEMUX_Filter_Open(CSDEMUX_FILTER_ID filter_id);
CSAPI_RESULT CSDEMUX_Filter_Close(CSDEMUX_HANDLE handle);

CSAPI_RESULT CSDEMUX_Filter_SetFilterType(CSDEMUX_HANDLE handle, CSDEMUX_FILTER_TYPE type);
CSAPI_RESULT CSDEMUX_Filter_SetSwitchMode(CSDEMUX_HANDLE handle, CSDEMUX_SWITCH_MOD sw_mod);

CSAPI_RESULT CSDEMUX_Filter_SetFilter(CSDEMUX_HANDLE handle, const unsigned char *const filter_ptr,
				      const unsigned char *const mask_ptr);
CSAPI_RESULT CSDEMUX_Filter_SetFilterCond(CSDEMUX_HANDLE handle, const unsigned char *const filter_cond_ptr);

CSAPI_RESULT CSDEMUX_Filter_GetFreeCRCNumber(CSDEMUX_HANDLE handle, unsigned int *crc_number);
CSAPI_RESULT CSDEMUX_Filter_MallocCRC(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_Filter_FreeCRC(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_Filter_EnableCRC(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_Filter_DisableCRC(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_FILTER_SetSectionNotify(CSDEMUX_HANDLE handle, 
					     void (*call_back_function) (CSDEMUX_HANDLE, CSDEMUX_SECEVENT *), 
					     CSDEMUX_SECEVENT demux_event,
					     int event_enable);
CSAPI_RESULT CSDEMUX_FILTER_SetSaveErrSectionDataFlag(CSDEMUX_HANDLE handle, int enable);

CSAPI_RESULT CSDEMUX_Filter_AddPID(CSDEMUX_HANDLE handle, unsigned short pid);
CSAPI_RESULT CSDEMUX_Filter_ResetPID(CSDEMUX_HANDLE handle);

CSAPI_RESULT CSDEMUX_Filter_ReadWait(CSDEMUX_HANDLE handle, unsigned int ms_timeout);
CSAPI_RESULT CSDEMUX_Filter_CheckDataSize(CSDEMUX_HANDLE handle, unsigned int *size);
CSAPI_RESULT CSDEMUX_Filter_ReadData(CSDEMUX_HANDLE handle, unsigned char *buf, unsigned int *size);
CSAPI_RESULT CSDEMUX_Filter_CheckSectionNum(CSDEMUX_HANDLE handle, unsigned int *num);
CSAPI_RESULT CSDEMUX_Filter_ReadSectionData(CSDEMUX_HANDLE handle, unsigned char *buf, unsigned int *size);

CSAPI_RESULT CSDEMUX_Filter_Enable(CSDEMUX_HANDLE handle);
CSAPI_RESULT CSDEMUX_Filter_Disable(CSDEMUX_HANDLE handle);

CSAPI_RESULT CSDEMUX_DEBUG_PRINTCRC(void);

CSAPI_RESULT CSDEMUX_FILTER_GenericRead(CSDEMUX_HANDLE handle, int (*func) (void *buff, int sz, void *context),
	                                          unsigned int len, void* context);
#ifdef __cplusplus
}
#endif

#endif

