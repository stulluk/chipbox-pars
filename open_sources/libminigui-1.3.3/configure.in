dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.13)

AC_INIT(src/main/main.c)

dnl Set various version strings - taken gratefully from the SDL sources
#
# Making releases:
# Change the version, then:
#   MINIGUI_MICRO_VERSION += 1;
#   MINIGUI_INTERFACE_AGE += 1;
#   MINIGUI_BINARY_AGE += 1;
# if any functions have been added, set MINIGUI_INTERFACE_AGE to 0.
# if backwards compatibility has been broken,
# set MINIGUI_BINARY_AGE and MINIGUI_INTERFACE_AGE to 0.
#
MiniGUI_MAJOR_VERSION=1
MiniGUI_MINOR_VERSION=3
MiniGUI_MICRO_VERSION=3
MiniGUI_INTERFACE_AGE=0
MiniGUI_BINARY_AGE=0
MiniGUI_VERSION=$MiniGUI_MAJOR_VERSION.$MiniGUI_MINOR_VERSION.$MiniGUI_MICRO_VERSION

AC_SUBST(MiniGUI_MAJOR_VERSION)
AC_SUBST(MiniGUI_MINOR_VERSION)
AC_SUBST(MiniGUI_MICRO_VERSION)
AC_SUBST(MiniGUI_INTERFACE_AGE)
AC_SUBST(MiniGUI_BINARY_AGE)
AC_SUBST(MiniGUI_VERSION)

# libtool versioning
LT_RELEASE=$MiniGUI_MAJOR_VERSION.$MiniGUI_MINOR_VERSION
LT_CURRENT=`expr $MiniGUI_MICRO_VERSION - $MiniGUI_INTERFACE_AGE`
LT_REVISION=$MiniGUI_INTERFACE_AGE
LT_AGE=`expr $MiniGUI_BINARY_AGE - $MiniGUI_INTERFACE_AGE`

AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

AC_CANONICAL_SYSTEM

dnl ========================================================================
dnl Check for tools
AC_PROG_CC
AC_PROG_LIBTOOL
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

dnl ========================================================================
dnl Put the name and version of the package here
AM_INIT_AUTOMAKE(libminigui,$MiniGUI_VERSION,-)

dnl ========================================================================
dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_DIRENT
AC_CHECK_HEADERS(malloc.h sys/types.h sys/ioctl.h sys/time.h termio.h unistd.h math.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(gettimeofday alloca strdup strcasecmp strerror setenv tmpfile)

dnl ========================================================================
dnl User selectable options

dnl System wide options
lite_version="no"
stand_alone="no"
incore_res="no"
use_newgal="yes"
use_debug="no"
trace_message="no"
message_string="no"
timer_unit_is_10ms="yes"
move_window_by_mouse="yes"
flat_window_style="no"
double_click="yes"
build_cursor_support="yes"

dnl Old GAL engine-specific options
build_svgalib_engine="no"
build_libggi_engine="no"
build_ads_gal_engine="no"
build_vga16_gal_engine="no"
build_native_gal_engine="yes"
with_gal_fbcon="yes"
with_gal_qvfb="yes"
with_gal_ecoslcd="no"
with_coor_trans_cw="no"
with_coor_trans_ccw="no"
build_native_fblin1r="no"
build_native_fblin1l="no"
build_native_fblin2r="no"
build_native_fblin2l="no"
build_native_fblin4r="no"
build_native_fblin4l="no"
build_native_fblin8="yes"
build_native_fblin16="yes"
build_native_fblin24="no"
build_native_fblin32="no"

dnl IAL engine-specific options
build_ep7211_ial_engine="no"
build_ads_ial_engine="no"
build_ipaq_ial_engine="no"
build_mpc823_ial_engine="no"
bulid_px255b_ial_engine="no"
build_vr4181_ial_engine="no"
build_helio_ial_engine="no"
build_tfstb_ial_engine="no"
build_t800_ial_engine="no"
build_mc68x328_ial_engine="no"
build_smdk2410_ial_engine="no"
build_dummy_ial_engine="yes"
build_qvfb_ial_engine="yes"
build_native_ial_engine="yes"
build_native_ps2="yes"
build_native_imps2="yes"
build_native_ms="yes"
build_native_ms3="yes"
build_native_gpm="yes"
build_text_mode="yes"

dnl Font related options
build_rbf_support="yes"
build_incorerbf_gb12="yes"
build_vbf_support="yes"
build_incorefont_sansserif="yes"
build_incorefont_courier="yes"
build_incorefont_symbol="yes"
build_incorefont_vgas="yes"
build_qpf_support="yes"
build_ttf_support="yes"
build_type1_support="yes"

dnl Charset related options
build_latin2_support="no"
build_latin3_support="no"
build_latin4_support="no"
build_cyrillic_support="no"
build_arabic_support="no"
build_greek_support="no"
build_hebrew_support="no"
build_latin5_support="no"
build_latin6_support="no"
build_thai_support="no"
build_latin7_support="no"
build_latin8_support="no"
build_latin9_support="yes"
build_latin10_support="no"

build_gb_support="yes"
build_gbk_support="yes"
build_gb18030_support="no"
build_big5_support="yes"
build_euckr_support="no"
build_eucjp_support="no"
build_shiftjis_support="no"

build_unicode_support="yes"

dnl Keyboard layout specific options
use_kbd_frpc="no"
use_kbd_fr="no"
use_kbd_de="no"
use_kbd_delatin1="no"
use_kbd_it="no"
use_kbd_es="no"
use_kbd_escp850="no"

dnl Image related options
build_save_bitmap="yes"
build_pcx_support="no"
build_lbm_support="no"
build_tga_support="no"
build_gif_support="yes"
build_jpg_support="yes"
build_png_support="yes"

dnl Input method options
build_ime_gb2312="yes"
build_ime_gb2312_pinyin="yes"

dnl Misc options
build_misc_aboutdlg="yes"
build_misc_savescreen="yes"

with_gray_screen="no"
tiny_screen_size="no"

dnl Control related options
build_ctrl_static="yes"
build_ctrl_button="yes"
build_ctrl_simedit="yes"
build_ctrl_sledit="yes"
build_ctrl_mledit="yes"
build_ctrl_listbox="yes"
build_ctrl_progressbar="yes"
build_ctrl_toolbar="yes"
build_ctrl_newtoolbar="yes"
build_ctrl_menubutton="yes"
build_ctrl_trackbar="yes"
build_ctrl_combobox="yes"
build_ctrl_propsheet="yes"
build_ext_ctrl_monthcal="yes"
build_ext_ctrl_treeview="yes"
build_ext_ctrl_spinbox="yes"
build_ext_ctrl_coolbar="yes"
build_ext_ctrl_listview="yes"
build_ext_ctrl_grid="yes"

build_ext_fullgif="no"
build_ext_skin="yes"

build_libvcongui="yes"

enable_video_fbcon="yes"
enable_video_qvfb="yes"
enable_video_ecoslcd="no"
enable_video_dummy="yes"

AC_ARG_ENABLE(lite,
[  --enable-lite            build MiniGUI-Lite version <default=no>],
lite_version=$enableval)

AC_ARG_ENABLE(standalone,
[  --enable-standalone      build MiniGUI-Lite Stand-Alone version <default=no>],
stand_alone=$enableval)

AC_ARG_ENABLE(incoreres,
[  --enable-incoreres       use incore resource instead file IO to initialize MiniGUI <default=no>],
incore_res=$enableval)

AC_ARG_ENABLE(newgal,
[  --enable-newgal          use NEWGAL and its engines <default=yes>],
use_newgal=$enableval)

AC_ARG_ENABLE(debug,
[  --enable-debug           build with debugging messages <default=no>],
use_debug=$enableval)

AC_ARG_ENABLE(tracemsg,
[  --enable-tracemsg        trace messages of MiniGUI <default=no>],
trace_message=$enableval)

AC_ARG_ENABLE(msgstr,
[  --enable-msgstr          include symbol name of message <default=no>],
message_string=$enableval)

AC_ARG_ENABLE(timerunitms,
[  --enable-timerunitms     unit of timer is 10ms <default=yes>],
timer_unit_is_10ms=$enableval)

AC_ARG_ENABLE(micemoveable,
[  --enable-micemoveable    user can move window by using mouse <default=yes>],
move_window_by_mouse=$enableval)

AC_ARG_ENABLE(flatstyle,
[  --enable-flatstyle       windows were drawn in flat style instead 3D style <default=no>],
flat_window_style=$enableval)

AC_ARG_ENABLE(dblclk,
[  --enable-dblclk          mouse button can do double click <default=yes>],
double_click=$enableval)

AC_ARG_ENABLE(cursor,
[  --enable-cursor          include cursor support (for MiniGUI-Lite) <default=yes>],
build_cursor_support=$enableval)

AC_ARG_ENABLE(svgalib,
[  --enable-svgalib         build the GAL and IAL engines on SVGALib (for old GAL and MiniGUI-Threads) <default=no>],
build_svgalib_engine=$enableval)

AC_ARG_ENABLE(libggi,
[  --enable-libggi          build the GAL and IAL engines on LibGGI (for old GAL and MiniGUI-Threads) <default=no>],
build_libggi_engine=$enableval)

AC_ARG_ENABLE(vga16gal,
[  --enable-vga16gal        build the VGA 16-color mode GAL engine <default=no>],
build_vga16_gal_engine=$enableval)

AC_ARG_ENABLE(nativegal,
[  --enable-nativegal       build the native FrameBuffer GAL engine <default=yes>],
build_native_gal_engine=$enableval)

AC_ARG_ENABLE(galfbcon,
[  --enable-galfbcon        support native FrameBuffer GAL engine on Linux FrameBuffer console <default=yes>],
with_gal_fbcon=$enableval)

AC_ARG_ENABLE(galqvfb,
[  --enable-galqvfb         support native FrameBuffer GAL engine on Qt Virtual FrameBuffer <default=yes>],
with_gal_qvfb=$enableval)

AC_ARG_ENABLE(galecoslcd,
[  --enable-galecoslcd      support native FrameBuffer GAL engine on eCose LCD interface <default=no>],
with_gal_ecoslcd=$enableval)

AC_ARG_ENABLE(coortrans_cw,
[  --enable-coortrans_cw    support clockwise rotation of screen in the native FB GAL engine <default=no>],
with_coor_trans_cw=$enableval)

AC_ARG_ENABLE(coortrans_ccw,
[  --enable-coortrans_ccw   support counterclockwise rotation of screen in the native FB GAL engine <default=no>],
with_coor_trans_ccw=$enableval)

AC_ARG_ENABLE(fblin1r,
[  --enable-fblin1r         build the 1BPP FB subdriver of native graphics engine (MSB is right) <default=no>],
build_native_fblin1r=$enableval)

AC_ARG_ENABLE(fblin1l,
[  --enable-fblin1l          build the 1BPP FB subdriver of native graphics engine (MSB is left) <default=no>],
build_native_fblin1l=$enableval)

AC_ARG_ENABLE(fblin2r,
[  --enable-fblin2r         build the 2BPP FB subdriver of native graphics engine (MSB is right) <default=no>],
build_native_fblin2r=$enableval)

AC_ARG_ENABLE(fblin2l,
[  --enable-fblin2l         build the 2BPP FB subdriver of native graphics engine (MSB is left) <default=no>],
build_native_fblin2l=$enableval)

AC_ARG_ENABLE(fblin4r,
[  --enable-fblin4r         build the 4BPP FB subdriver of native graphics engine (MSB is right) <default=no>],
build_native_fblin4r=$enableval)

AC_ARG_ENABLE(fblin4l,
[  --enable-fblin4l         build the 4BPP FB subdriver of native graphics engine (MSB is left) <default=no>],
build_native_fblin4l=$enableval)

AC_ARG_ENABLE(fblin8,
[  --enable-fblin8          build the 8BPP FB subdriver of native graphics engine <default=yes>],
build_native_fblin8=$enableval)

AC_ARG_ENABLE(fblin16,
[  --enable-fblin16         build the 16BPP FB subdriver of native graphics engine <default=yes>],
build_native_fblin16=$enableval)

AC_ARG_ENABLE(fblin24,
[  --enable-fblin24         build the 24BPP FB subdriver of native graphics engine (incompleted) <default=no>],
build_native_fblin24=$enableval)

AC_ARG_ENABLE(fblin32,
[  --enable-fblin32         build the 32BPP FB subdriver of native graphics engine <default=no>],
build_native_fblin32=$enableval)

AC_ARG_ENABLE(fbvga16,
[  --enable-fbvga16         build the VGA16 FB subdriver of native graphics engine (do not enable, dangrous) <default=no>],
build_native_fbvga16=$enableval)

AC_ARG_ENABLE(ep7211ial,
[  --enable-ep7211ial       build the input engine for EP7211-based board <default=no>],
build_ep7211_ial_engine=$enableval)

AC_ARG_ENABLE(adsial,
[  --enable-adsial          build the input engine for ADS Graphics Client board <default=no>],
build_ads_ial_engine=$enableval)

AC_ARG_ENABLE(ipaqial,
[  --enable-ipaqial         build the input engine for iPAQ H3600 <default=no>],
build_ipaq_ial_engine=$enableval)

AC_ARG_ENABLE(mpc823ial,
[  --enable-mpc823ial       build the input engine for mpc823 <default=no>],
build_mpc823_ial_engine=$enableval)

AC_ARG_ENABLE(px255bial,
[  --enable-px255bial       build the input engine for px255b <default=no>],
bulid_px255b_ial_engine=$enableval)

AC_ARG_ENABLE(vr4181ial,
[  --enable-vr4181ial       build the input engine for NEC VR4181 debug board <default=no>],
build_vr4181_ial_engine=$enableval)

AC_ARG_ENABLE(helioial,
[  --enable-helioial        build the input engine for Helio Touch Panel <default=no>],
build_helio_ial_engine=$enableval)

AC_ARG_ENABLE(tfstbial,
[  --enable-tfstbial        build the input engine for Tongfang STB <default=no>],
build_tfstb_ial_engine=$enableval)

AC_ARG_ENABLE(t800ial,
[  --enable-t800ial         build the input engine for MT T800 <default=no>],
build_t800_ial_engine=$enableval)

AC_ARG_ENABLE(mc68x328ial,
[  --enable-mc68x328ial     build the input engine for uClinux touch screen palm/mc68ez328 <default=no>],
build_mc68x328_ial_engine=$enableval)

AC_ARG_ENABLE(smdk2410ial,
[  --enable-smdk2410ial     build the input engine for SMDK2410 touch screen <default=no>],
build_smdk2410_ial_engine=$enableval)


AC_ARG_ENABLE(dummyial,
[  --enable-dummyial        build the Dummy IAL engine <default=yes>],
build_dummy_ial_engine=$enableval)

AC_ARG_ENABLE(qvfbial,
[  --enable-qvfbial         build the QVFB IAL engine <default=yes>],
build_qvfb_ial_engine=$enableval)

AC_ARG_ENABLE(nativeial,
[  --enable-nativeial       build the native (console) input engine <default=yes>],
build_native_ial_engine=$enableval)

AC_ARG_ENABLE(nativeps2,
[  --enable-nativeps2       build the native engine subdriver for PS2 mouse <default=yes>],
build_native_ps2=$enableval)

AC_ARG_ENABLE(nativeimps2,
[  --enable-nativeimps2     build the native engine subdriver for IntelligentMouse (IMPS/2) mouse <default=yes>],
build_native_imps2=$enableval)

AC_ARG_ENABLE(nativems,
[  --enable-nativems        build the native engine subdirver for old MS serial mouse <default=yes>],
build_native_ms=$enableval)

AC_ARG_ENABLE(nativems3,
[  --enable-nativems3       build the native engine subdirver for MS3 mouse <default=yes>],
build_native_ms3=$enableval)

AC_ARG_ENABLE(nativegpm,
[  --enable-nativegpm       build the native engine subdirver for GPM daemon <default=yes>],
build_native_gpm=$enableval)

AC_ARG_ENABLE(textmode,
[  --enable-textmode        Linux system have console (text mode) on FrameBuffer <default=yes>],
build_text_mode=$enableval)

AC_ARG_ENABLE(rbfsupport,
[  --enable-rbfsupport      include raw bitmap font support <default=yes>],
build_rbf_support=$enableval)

AC_ARG_ENABLE(rbfgb12,
[  --enable-rbfgb12         include incore RBF font of GB2312 12x12 (effective when use incore resource) <default=yes>],
build_incorerbf_gb12=$enableval)

AC_ARG_ENABLE(vbfsupport,
[  --enable-vbfsupport      include var bitmap font support <default=yes>],
build_vbf_support=$enableval)

AC_ARG_ENABLE(fontsserif,
[  --enable-fontsserif      include incore font sansserif <default=yes>],
build_incorefont_sansserif=$enableval)

AC_ARG_ENABLE(fontcourier,
[  --enable-fontcourier     include incore font courier <default=yes>],
build_incorefont_courier=$enableval)

AC_ARG_ENABLE(fontsymbol,
[  --enable-fontsymbol      include incore font symbol <default=yes>],
build_incorefont_symbol=$enableval)

AC_ARG_ENABLE(fontvgas,
[  --enable-fontvgas        include incore font vgas <default=yes>],
build_incorefont_vgas=$enableval)

AC_ARG_ENABLE(qpfsupport,
[  --enable-qpfsupport      build support for Qt Prerendered Font (QPF) <default=yes>],
build_qpf_support=$enableval)

AC_ARG_ENABLE(ttfsupport,
[  --enable-ttfsupport      build support for TrueType font <default=yes>],
build_ttf_support=$enableval)

AC_ARG_ENABLE(type1support,
[  --enable-type1support    build support for Adobe Type1 font <default=yes>],
build_type1_support=$enableval)

AC_ARG_ENABLE(latin2support,
[  --enable-latin2support   include East European (Latin 2, ISO-8859-2) charset support <default=no>],
build_latin2_support=$enableval)

AC_ARG_ENABLE(latin3support,
[  --enable-latin3support   include South European (Latin 3, ISO-8859-3) charset support <default=no>],
build_latin3_support=$enableval)

AC_ARG_ENABLE(latin4support,
[  --enable-latin4support   include North European (Latin 4, ISO-8859-4) charset support <default=no>],
build_latin4_support=$enableval)

AC_ARG_ENABLE(cyrillicsupport,
[  --enable-cyrillicsupport include Cyrillic (ISO-8859-5) charset support <default=no>],
build_cyrillic_support=$enableval)

AC_ARG_ENABLE(arabicsupport,
[  --enable-arabicsupport   include Arabic (ISO-8859-6) charset support <default=no>],
build_arabic_support=$enableval)

AC_ARG_ENABLE(greeksupport,
[  --enable-greeksupport    include Greek (ISO-8859-7) charset support <default=no>],
build_greek_support=$enableval)

AC_ARG_ENABLE(hebrewsupport,
[  --enable-hebrewsupport   include Hebrew (ISO-8859-8) charset support <default=no>],
build_hebrew_support=$enableval)

AC_ARG_ENABLE(latin5support,
[  --enable-latin5support   include Turkish (Latin 5, ISO-8859-9) charset support <default=no>],
build_latin5_support=$enableval)

AC_ARG_ENABLE(latin6support,
[  --enable-latin6support   include Nordic, Latin 6, ISO-8859-10) charset support <default=no>],
build_latin6_support=$enableval)

AC_ARG_ENABLE(thaisupport,
[  --enable-thaisupport     include Thai (ISO-8859-11) charset support <default=no>],
build_thai_support=$enableval)

AC_ARG_ENABLE(latin7support,
[  --enable-latin7support   include Latin 7 (ISO-8859-13) charset support <default=no>],
build_latin7_support=$enableval)

AC_ARG_ENABLE(latin8support,
[  --enable-latin8support   include Latin 8 (ISO-8859-14) charset support <default=no>],
build_latin8_support=$enableval)

AC_ARG_ENABLE(latin9support,
[  --enable-latin9support   include Latin 9 (ISO-8859-15, West Extended) charset support <default=yes>],
build_latin9_support=$enableval)

AC_ARG_ENABLE(latin10support,
[  --enable-latin10support  include Latin 10 (ISO-8859-16, Romanian) charset support <default=no>],
build_latin10_support=$enableval)

AC_ARG_ENABLE(gbsupport,
[  --enable-gbsupport       include EUC encoding of GB2312 charset support <default=yes>],
build_gb_support=$enableval)

AC_ARG_ENABLE(gbksupport,
[  --enable-gbksupport      include GBK charset support <default=yes>],
build_gbk_support=$enableval)

AC_ARG_ENABLE(gb18030support,
[  --enable-gb18030support  include GB18030-0 charset support <default=no>],
build_gb18030_support=$enableval)

AC_ARG_ENABLE(big5support,
[  --enable-big5support     include BIG5 charset support <default=yes>],
build_big5_support=$enableval)

AC_ARG_ENABLE(euckrsupport,
[  --enable-euckrsupport    include support for EUC encoding of KSC5636 and KSC5601 charsets <default=no>],
build_euckr_support=$enableval)

AC_ARG_ENABLE(eucjpsupport,
[  --enable-eucjpsupport    include support for EUC encoding of JISX0201 and JISX0208 charsets <default=no>],
build_eucjp_support=$enableval)

AC_ARG_ENABLE(shiftjissupport,
[  --enable-shiftjissupport include support for Shift-JIS encoding of JISX0201 and JISX0208 charsets <default=no>],
build_shiftjis_support=$enableval)

AC_ARG_ENABLE(unicodesupport,
[  --enable-unicodesupport  include UNICODE (ISO-10646-1 and UTF-8 encoding) support <default=yes>],
build_unicode_support=$enableval)

AC_ARG_ENABLE(kbdfrpc,
[  --enable-kbdfrpc         include keyboard layout for French PC keyboard (non-US 102 keys) <default=no>],
use_kbd_frpc=$enableval)

AC_ARG_ENABLE(kbdfr,
[  --enable-kbdfr           include keyboard layout for French <default=no>],
use_kbd_fr=$enableval)

AC_ARG_ENABLE(kbdde,
[  --enable-kbdde           include keyboard layout for German <default=no>],
use_kbd_de=$enableval)

AC_ARG_ENABLE(kbddelatin1,
[  --enable-kbddelatin1     include keyboard layout for German Latin1 <default=no>],
use_kbd_delatin1=$enableval)

AC_ARG_ENABLE(kbdit,
[  --enable-kbdit           include keyboard layout for Italian <default=no>],
use_kbd_it=$enableval)

AC_ARG_ENABLE(kbdes,
[  --enable-kbdes           include keyboard layout for Spanish <default=no>],
use_kbd_es=$enableval)

AC_ARG_ENABLE(kbdescp850,
[  --enable-kbdescp850      include keyboard layout for Spanish CP850 <default=no>],
use_kbd_escp850=$enableval)

AC_ARG_ENABLE(savebitmap,
[  --enable-savebitmap      include SaveBitmap-related functions <default=yes>],
build_save_bitmap=$enableval)

AC_ARG_ENABLE(pcxsupport,
[  --enable-pcxsupport      include PCX file support <default=no>],
build_pcx_support=$enableval)

AC_ARG_ENABLE(lbmsupport,
[  --enable-lbmsupport      include LBM/PBM file support <default=no>],
build_lbm_support=$enableval)

AC_ARG_ENABLE(tgasupport,
[  --enable-tgasupport      include TGA file support <default=no>],
build_tga_support=$enableval)

AC_ARG_ENABLE(gifsupport,
[  --enable-gifsupport      include GIF file support <default=yes>],
build_gif_support=$enableval)

AC_ARG_ENABLE(jpgsupport,
[  --enable-jpgsupport      include JPG file support <default=yes>],
build_jpg_support=$enableval)

AC_ARG_ENABLE(pngsupport,
[  --enable-pngsupport      include PNG file support <default=yes>],
build_png_support=$enableval)

AC_ARG_ENABLE(imegb2312,
[  --enable-imegb2312       include IME (GB2312) support <default=yes>],
build_ime_gb2312=$enableval)

AC_ARG_ENABLE(imegb2312py,
[  --enable-imegb2312py     include IME (GB2312) Intelligent Pinyin module <default=yes>],
build_ime_gb2312_pinyin=$enableval)

AC_ARG_ENABLE(aboutdlg,
[  --enable-aboutdlg        include About Dialog Box <default=yes>],
build_misc_aboutdlg=$enableval)

AC_ARG_ENABLE(savescreen,
[  --enable-savescreen      include code for screenshots <default=yes>],
build_misc_savescreen=$enableval)

AC_ARG_ENABLE(grayscreen,
[  --enable-grayscreen      target is a gray screen <default=no>],
with_gray_screen=$enableval)

AC_ARG_ENABLE(tinyscreen,
[  --enable-tinyscreen      target is a tiny-size screen <default=no>],
tiny_screen_size=$enableval)

AC_ARG_ENABLE(ctrlstatic,
[  --enable-ctrlstatic      include STATIC control <default=yes>],
build_ctrl_static=$enableval)

AC_ARG_ENABLE(ctrlbutton,
[  --enable-ctrlbutton      include BUTTON control <default=yes>],
build_ctrl_button=$enableval)

AC_ARG_ENABLE(ctrlsimedit,
[  --enable-ctrlsimedit     include Simple EDIT control <default=yes>],
build_ctrl_simedit=$enableval)

AC_ARG_ENABLE(ctrlsledit,
[  --enable-ctrlsledit      include Single-Line EDIT control <default=yes>],
build_ctrl_sledit=$enableval)

AC_ARG_ENABLE(ctrlmledit,
[  --enable-ctrlmledit      include Multi-Line EDIT control <default=yes>],
build_ctrl_mledit=$enableval)

AC_ARG_ENABLE(ctrllistbox,
[  --enable-ctrllistbox     include LISTBOX control <default=yes>],
build_ctrl_listbox=$enableval)

AC_ARG_ENABLE(ctrlpgbar,
[  --enable-ctrlpgbar       include PROGRESSBAR control <default=yes>],
build_ctrl_progressbar=$enableval)

AC_ARG_ENABLE(ctrltoolbar,
[  --enable-ctrltoolbar     include TOOLBAR control <default=yes>],
build_ctrl_toolbar=$enableval)

AC_ARG_ENABLE(ctrlnewtoolbar,
[  --enable-ctrlnewtoolbar  include NEWTOOLBAR control <default=yes>],
build_ctrl_newtoolbar=$enableval)

AC_ARG_ENABLE(ctrlmenubtn,
[  --enable-ctrlmenubtn     include MENUBUTTON control <default=yes>],
build_ctrl_menubutton=$enableval)

AC_ARG_ENABLE(ctrltrackbar,
[  --enable-ctrltrackbar    include TRACKBAR control <default=yes>],
build_ctrl_trackbar=$enableval)

AC_ARG_ENABLE(ctrlcombobox,
[  --enable-ctrlcombobox    include COMBOBOX control <default=yes>],
build_ctrl_combobox=$enableval)

AC_ARG_ENABLE(ctrlpropsheet,
[  --enable-ctrlpropsheet   include PROPSHEET control <default=yes>],
build_ctrl_propsheet=$enableval)

AC_ARG_ENABLE(extctrlmonthcal,
[  --enable-extctrlmonthcal     include MONTHCALENDAR control in MiniGUIExt library <default=yes>],
build_ext_ctrl_monthcal=$enableval)

AC_ARG_ENABLE(extctrltreeview,
[  --enable-extctrltreeview     include TREEVIEW control in MiniGUIExt library <default=yes>],
build_ext_ctrl_treeview=$enableval)

AC_ARG_ENABLE(extctrlspinbox,
[  --enable-extctrlspinbox      include SPINBOX control in MiniGUIExt library <default=yes>],
build_ext_ctrl_spinbox=$enableval)

AC_ARG_ENABLE(extctrlcoolbar,
[  --enable-extctrlcoolbar      include COOLBAR control in MiniGUIExt library <default=yes>],
build_ext_ctrl_coolbar=$enableval)

AC_ARG_ENABLE(extctrllistview,
[  --enable-extctrllistview     include LISTVIEW control in MiniGUIExt library <default=yes>],
build_ext_ctrl_listview=$enableval)

AC_ARG_ENABLE(extctrlgrid,
[  --enable-extctrlgrid		include GRID control in MiniGUIExt library <default=yes>],
build_ext_ctrl_grid=$enableval)

AC_ARG_ENABLE(extfullgif,
[  --enable-extfullgif          include full GIF support in MiniGUIExt library <default=no>],
build_ext_fullgif=$enableval)

AC_ARG_ENABLE(extskin,
[  --enable-extskin             include skin support in MiniGUIExt library <default=no>],
build_ext_skin=$enableval)

AC_ARG_ENABLE(libvcongui,
[  --enable-libvcongui          include support for Virtual Console on Linux <default=yes>],
build_libvcongui=$enableval)

dnl Find the framebuffer console includes
CheckFBCON()
{
    AC_ARG_ENABLE(videofbcon,
[  --enable-videofbcon     include FrameBuffer console NEWGAL engine <default=yes>],
    enable_video_fbcon=$enableval)
    if test x$enable_video_fbcon = xyes; then
        AC_MSG_CHECKING(for FrameBuffer console support)
        video_fbcon=no
        AC_TRY_COMPILE([
         #include <linux/fb.h>
         #include <linux/kd.h>
         #include <linux/keyboard.h>
        ],[
        ],[
        video_fbcon=yes
        ])
        AC_MSG_RESULT($video_fbcon)
        if test x$video_fbcon = xyes; then
            VIDEO_CFLAGS="$VIDEO_CFLAGS -DENABLE_FBCON"
            VIDEO_SUBDIRS="$VIDEO_SUBDIRS fbcon"
            VIDEO_DRIVERS="$VIDEO_DRIVERS fbcon/libvideo_fbcon.la"
        fi
    fi
}

dnl Check Qt Virtual FrameBuffer
CheckQVFB()
{
    AC_ARG_ENABLE(videoqvfb,
[  --enable-videoqvfb      include Qt Virtual FrameBuffer NEWGAL engine <default=yes>],
    enable_video_qvfb=$enableval)

    if test "x$enable_video_qvfb" = "xyes"; then
        VIDEO_CFLAGS="$VIDEO_CFLAGS -DENABLE_QVFB"
        VIDEO_SUBDIRS="$VIDEO_SUBDIRS qvfb"
        VIDEO_DRIVERS="$VIDEO_DRIVERS qvfb/libvideo_qvfb.la"
    fi
}

dnl Set up the ECOS LCD video driver.
CheckECOSLCD()
{
    AC_ARG_ENABLE(videoecoslcd,
[  --enable-videoecoslcd  include NEWGAL engine for ECOS LCD <default=yes>],
    enable_video_ecoslcd=$enableval)

    if test "x$enable_video_ecoslcd" = "xyes"; then
      VIDEO_CFLAGS="$VIDEO_CFLAGS -DENABLE_ECOSLCD"
      VIDEO_SUBDIRS="$VIDEO_SUBDIRS ecoslcd"
      VIDEO_DRIVERS="$VIDEO_DRIVERS ecoslcd/libvideo_ecoslcd.la"
    fi
}

dnl Set up the Null video driver.
CheckDummyVideo()
{
    AC_ARG_ENABLE(videodummy,
[  --enable-videodummy     include dummy NEWGAL engine <default=yes>],
    enable_video_dummy=$enableval)

    if test "x$enable_video_dummy" = "xyes"; then
      VIDEO_CFLAGS="$VIDEO_CFLAGS -DENABLE_DUMMYVIDEO"
      VIDEO_SUBDIRS="$VIDEO_SUBDIRS dummy"
      VIDEO_DRIVERS="$VIDEO_DRIVERS dummy/libvideo_null.la"
    fi
}

dnl ========================================================================
dnl Checks for option-specific libraries and headers.

if test "x$lite_version" = "xyes"; then
  use_threads="no"
  timer_unit_is_10ms="yes"
  build_svgalib_engine="no"
  build_libggi_engine="no"
else
  use_threads="yes"
fi

if test "x$use_newgal" = "xyes"; then
  CheckDummyVideo
  CheckFBCON
  CheckQVFB
  CheckECOSLCD
dnl  CheckSVGA
dnl  CheckGGI
dnl  CheckAAlib
dnl  CheckX11
dnl  CheckDGA

  build_native_gal_engine="no"
  build_svgalib_engine="no"
  build_libggi_engine="no"
  build_vga16_gal_engine="no"
fi

if test "x$build_native_gal_engine" = "xno"; then
  build_native_fblin1r="no"
  build_native_fblin1l="no"
  build_native_fblin2r="no"
  build_native_fblin2l="no"
  build_native_fblin4r="no"
  build_native_fblin4l="no"
  build_native_fblin8="no"
  build_native_fblin16="no"
  build_native_fblin24="no"
  build_native_fblin32="no"
  build_native_fbvga16="no"
fi

dnl ========================================================================
dnl Checks for libraries.

have_pthreads=no
if test "x$use_threads" != "xno"; then
  AC_MSG_CHECKING(for pthread library)
  TMP_SAVE_LIBS=$LIBS
  AC_TRY_LINK([
#include "confdefs.h"
#define __C_ASM_H /* fix for retarded Digital Unix headers */
#include <pthread.h>],[
void foo(void)
{
pthread_exit (0);
}
],
    have_pthreads=yes
    AC_MSG_RESULT(yes),
    AC_MSG_RESULT(no))
    LIBS=$TMP_SAVE_LIBS
fi

dnl Check for SVGALib.
svgalib_missing_part=no
if test "x$build_svgalib_engine" != "xno"; then
    AC_CHECK_LIB(vgagl,gl_line,
        SYSTEM_LIBS="$SYSTEM_LIBS -lvgagl -lvga",
        svgalib_missing_part=yes, -lvga)
fi

if test "x$build_vga16_gal_engine" != "xno"; then
    AC_CHECK_LIB(vga,vga_init,
        SYSTEM_LIBS="$SYSTEM_LIBS -lvga",
        svgalib_missing_part=yes)
fi

if test "x$svgalib_missing_part" = "xyes"; then
    build_svgalib_engine=no
    build_vga16_gal_engine=no
    AC_MSG_WARN([
You configured to build GAL/IAL engines that run on SVGALib, 
but I could not find SVGALib on your system.
You must install SVGALib-1.4.3 or later for building MiniGUI that can 
run on SVGALib.  Please compile and install svgalib-1.4.3 or later first.
    ])
fi

dnl Check for LibGGI.
if test "x$build_libggi_engine" != "xno"; then
    
    AC_CHECK_LIB(ggi,ggiInit,
        SYSTEM_LIBS="$SYSTEM_LIBS -lggi -lgii -lgg",
         libggi_missing_part=yes)

    AC_CHECK_LIB(ggi,ggiEventSelect,foo=bar,
        AC_MSG_WARN(Unable to find correct LibGGI))
fi

if test "x$libggi_missing_part" = "xyes"; then
    build_libggi_engine=no
    AC_MSG_WARN([
You configured to build GAL/IAL engines that run on LibGGI, 
but I could not find LibGGI on your system.  You need LibGGI for
building MiniGUI that can run on LibGGI. Please compile LibGGI first.
    ])
fi

dnl Check for correct FreeType library (FreeType 2 first, then FreeType 1.3 or later)
has_freetype2=yes
if test "x$build_ttf_support" != "xno"; then
dnl    AC_CHECK_LIB(freetype, FT_Init_FreeType,
dnl        SYSTEM_LIBS="$SYSTEM_LIBS -lfreetype", 
dnl        has_freetype2=no)
dnl    if test "x$has_freetype2" = "xno"; then
        AC_CHECK_LIB(ttf, TT_FreeType_Version,
            SYSTEM_LIBS="$SYSTEM_LIBS -lttf", 
            build_ttf_support=no)
        has_freetype2=no
dnl    fi
fi

dnl Check for Type1 font library.
if test "x$build_type1_support" != "xno"; then
    AC_CHECK_LIB(t1, T1_InitLib,
        SYSTEM_LIBS="$SYSTEM_LIBS -lt1",
        build_type1_support=no, -lm)
fi

dnl Check for JPEG library.
if test "x$build_jpg_support" != "xno"; then
    AC_CHECK_LIB(jpeg, jpeg_std_error,
        SYSTEM_LIBS="$SYSTEM_LIBS -ljpeg",
        build_jpg_support=no, -lm)
fi

dnl Check for PNG library.
if test "x$build_png_support" != "xno"; then
    AC_CHECK_LIB(png, png_check_sig,
        SYSTEM_LIBS="$SYSTEM_LIBS -lpng",
        build_png_support=no, -lm)
fi

AM_CONFIG_HEADER(config.h)

AC_DEFINE_UNQUOTED(MINIGUI_MAJOR_VERSION, $MiniGUI_MAJOR_VERSION)
AC_DEFINE_UNQUOTED(MINIGUI_MINOR_VERSION, $MiniGUI_MINOR_VERSION)
AC_DEFINE_UNQUOTED(MINIGUI_MICRO_VERSION, $MiniGUI_MICRO_VERSION)
AC_DEFINE_UNQUOTED(MINIGUI_INTERFACE_AGE, $MiniGUI_INTERFACE_AGE)
AC_DEFINE_UNQUOTED(MINIGUI_BINARY_AGE, $MiniGUI_BINARY_AGE)

dnl ========================================================================
dnl Finally add some flags

if test "x$lite_version" = "xyes"; then
  AC_DEFINE(_LITE_VERSION)
  CFLAGS="$CFLAGS -D__MINIGUI_LIB__ -D_REENTRANT"
else
  CFLAGS="$CFLAGS -D__MINIGUI_LIB__ -D_REENTRANT"
fi

if test "x$stand_alone" = "xyes"; then
  AC_DEFINE(_STAND_ALONE)
fi

if test "x$incore_res" = "xyes"; then
  AC_DEFINE(_INCORE_RES)
  build_qpf_support="no"
  build_ttf_support="no"
  build_type1_support="no"
  build_ime_gb2312="no"
  build_misc_aboutdlg="no"
fi

if test "x$use_debug" = "xyes"; then
  if test "$ac_cv_prog_gcc" = "yes"; then
    CFLAGS="$CFLAGS -g -Wall -Wstrict-prototypes -pipe"
  fi
  AC_DEFINE(_DEBUG)
  CFLAGS="$CFLAGS -UNDEBUG -D_DEBUG"
else
  if test "$ac_cv_prog_gcc" = "yes"; then
    CFLAGS="$CFLAGS -O2 -Wall -Wstrict-prototypes -pipe"
  fi
CFLAGS="$CFLAGS -DNDEBUG"
fi

if test "x$use_newgal" = "xyes"; then
    AC_DEFINE(_USE_NEWGAL)
    AC_DEFINE(_FIXED_MATH)
    AC_CHECK_LIB(m, pow, SYSTEM_LIBS="$SYSTEM_LIBS -lm", foo=bar)
fi

if test "x$trace_message" = "xyes"; then
    AC_DEFINE(_TRACE_MSG)
    AC_DEFINE(_MSG_STRING)
else
  if test "x$message_string" = "xyes"; then
    AC_DEFINE(_MSG_STRING)
  fi
fi

if test "x$timer_unit_is_10ms" = "xyes"; then
    AC_DEFINE(_TIMER_UNIT_10MS)
fi

if test "x$move_window_by_mouse" = "xyes"; then
    AC_DEFINE(_MOVE_WINDOW_BY_MOUSE)
fi

if test "x$flat_window_style" = "xyes"; then
    AC_DEFINE(_FLAT_WINDOW_STYLE)
    if test "x$use_newgal" = "xno"; then
        AC_DEFINE(_GRAY_SCREEN)
    fi
fi

if test "x$double_click" = "xyes"; then
    AC_DEFINE(_DOUBLE_CLICK)
fi

if test "x$build_vga16_gal_engine" = "xyes"; then
    AC_DEFINE(_VGA16_GAL)
fi

if test "x$build_svgalib_engine" = "xyes"; then
    AC_DEFINE(_SVGALIB)
fi

if test "x$build_libggi_engine" = "xyes"; then
    AC_DEFINE(_LIBGGI)
fi

if test "x$build_ep7211_ial_engine" = "xyes"; then
    AC_DEFINE(_EP7211_IAL)
fi

if test "x$build_ads_ial_engine" = "xyes"; then
    AC_DEFINE(_ADS_IAL)
fi

if test "x$build_ipaq_ial_engine" = "xyes"; then
    AC_DEFINE(_IPAQ_IAL)
fi

if test "x$build_mpc823_ial_engine" = "xyes"; then
    AC_DEFINE(_MPC823_IAL)
fi

if test "x$bulid_px255b_ial_engine" = "xyes"; then
    AC_DEFINE(_PX255B_IAL)
fi

if test "x$build_thor_ial_engine" = "xyes"; then
    AC_DEFINE(_THOR_IAL)
fi

if test "x$build_vr4181_ial_engine" = "xyes"; then
    AC_DEFINE(_VR4181_IAL)
fi

if test "x$build_helio_ial_engine" = "xyes"; then
    AC_DEFINE(_HELIO_IAL)
fi

if test "x$build_tfstb_ial_engine" = "xyes"; then
    AC_DEFINE(_TFSTB_IAL)
fi

if test "x$build_t800_ial_engine" = "xyes"; then
    AC_DEFINE(_T800_IAL)
fi

if test "x$build_mc68x328_ial_engine" = "xyes"; then
    AC_DEFINE(_MC68X328_IAL)
fi

if test "x$build_smdk2410_ial_engine" = "xyes"; then
    AC_DEFINE(_SMDK2410_IAL)
fi

if test "x$build_dummy_ial_engine" = "xyes"; then
    AC_DEFINE(_DUMMY_IAL)
fi

if test "x$build_qvfb_ial_engine" = "xyes"; then
    AC_DEFINE(_QVFB_IAL)
fi

if test "x$build_native_gal_engine" = "xyes"; then
    AC_DEFINE(_NATIVE_GAL_ENGINE)
fi

if test "x$with_gal_fbcon" = "xyes"; then
    AC_DEFINE(_NATIVE_GAL_FBCON)
fi

if test "x$with_gal_qvfb" = "xyes"; then
    AC_DEFINE(_NATIVE_GAL_QVFB)
fi

if test "x$with_gal_ecoslcd" = "xyes"; then
    AC_DEFINE(_NATIVE_GAL_ECOSLCD)
fi

if test "x$with_coor_trans_cw" = "xyes"; then
	AC_DEFINE(_COOR_TRANS)
	AC_DEFINE(_ROT_DIR_CCW, 0)
fi

if test "x$with_coor_trans_ccw" = "xyes"; then
	AC_DEFINE(_COOR_TRANS)
	AC_DEFINE(_ROT_DIR_CCW, 1)
fi

if test "x$build_native_fblin1r" = "xyes"; then
    AC_DEFINE(_FBLIN1R_SUPPORT)
fi

if test "x$build_native_fblin1l" = "xyes"; then
    AC_DEFINE(_FBLIN1L_SUPPORT)
fi

if test "x$build_native_fblin2r" = "xyes"; then
    AC_DEFINE(_FBLIN2R_SUPPORT)
fi

if test "x$build_native_fblin2l" = "xyes"; then
    AC_DEFINE(_FBLIN2L_SUPPORT)
fi

if test "x$build_native_fblin4r" = "xyes"; then
    AC_DEFINE(_FBLIN4R_SUPPORT)
fi

if test "x$build_native_fblin4l" = "xyes"; then
    AC_DEFINE(_FBLIN4L_SUPPORT)
fi

if test "x$build_native_fblin8" = "xyes"; then
    AC_DEFINE(_FBLIN8_SUPPORT)
fi

if test "x$build_native_fblin16" = "xyes"; then
    AC_DEFINE(_FBLIN16_SUPPORT)
fi

if test "x$build_native_fblin24" = "xyes"; then
    AC_DEFINE(_FBLIN24_SUPPORT)
fi

if test "x$build_native_fblin32" = "xyes"; then
    AC_DEFINE(_FBLIN32_SUPPORT)
fi

if test "x$build_native_fbvga16" = "xyes"; then
    AC_DEFINE(_FBVGA16_SUPPORT)
fi

if test "x$build_native_ial_engine" = "xyes"; then
    AC_DEFINE(_NATIVE_IAL_ENGINE)
fi

if test "x$build_native_ps2" = "xyes"; then
    AC_DEFINE(_PS2_SUPPORT)
fi

if test "x$build_native_imps2" = "xyes"; then
    AC_DEFINE(_IMPS2_SUPPORT)
fi

if test "x$build_native_ms" = "xyes"; then
    AC_DEFINE(_MS_SUPPORT)
fi

if test "x$build_native_ms3" = "xyes"; then
    AC_DEFINE(_MS3_SUPPORT)
fi

if test "x$build_native_gpm" = "xyes"; then
    AC_DEFINE(_GPM_SUPPORT)
fi

if test "x$build_text_mode" = "xyes"; then
    AC_DEFINE(_HAVE_TEXT_MODE)
fi

if test "x$build_cursor_support" = "xyes"; then
    AC_DEFINE(_CURSOR_SUPPORT)
fi

if test "x$build_rbf_support" = "xyes"; then
    AC_DEFINE(_RBF_SUPPORT)

  if test "x$build_incorerbf_gb12" = "xyes"; then
    AC_DEFINE(_INCORERBF_GB12)
  fi
fi

if test "x$build_vbf_support" = "xyes"; then
    AC_DEFINE(_VBF_SUPPORT)

  if test "x$build_incorefont_sansserif" = "xyes"; then
    AC_DEFINE(_INCOREFONT_SANSSERIF)
  fi

  if test "x$build_incorefont_courier" = "xyes"; then
    AC_DEFINE(_INCOREFONT_COURIER)
  fi

  if test "x$build_incorefont_symbol" = "xyes"; then
    AC_DEFINE(_INCOREFONT_SYMBOL)
  fi

  if test "x$build_incorefont_vgas" = "xyes"; then
    AC_DEFINE(_INCOREFONT_VGAS)
  fi

fi

if test "x$build_qpf_support" = "xyes"; then
    AC_DEFINE(_UNICODE_SUPPORT)
    AC_DEFINE(_QPF_SUPPORT)
fi

if test "x$build_ttf_support" = "xyes"; then
    AC_DEFINE(_UNICODE_SUPPORT)
    AC_DEFINE(_TTF_SUPPORT)
    if test "x$has_freetype2" = "xyes"; then
        AC_DEFINE(_HAS_FREETYPE2)
    fi
else
    has_freetype2=no
fi

if test "x$build_type1_support" = "xyes"; then
    AC_DEFINE(_TYPE1_SUPPORT)
fi

if test "x$build_latin2_support" = "xyes"; then
    AC_DEFINE(_LATIN2_SUPPORT)
fi

if test "x$build_latin3_support" = "xyes"; then
    AC_DEFINE(_LATIN3_SUPPORT)
fi

if test "x$build_latin4_support" = "xyes"; then
    AC_DEFINE(_LATIN4_SUPPORT)
fi

if test "x$build_cyrillic_support" = "xyes"; then
    AC_DEFINE(_CYRILLIC_SUPPORT)
fi

if test "x$build_arabic_support" = "xyes"; then
    AC_DEFINE(_ARABIC_SUPPORT)
fi

if test "x$build_greek_support" = "xyes"; then
    AC_DEFINE(_GREEK_SUPPORT)
fi

if test "x$build_hebrew_support" = "xyes"; then
    AC_DEFINE(_HEBREW_SUPPORT)
fi

if test "x$build_latin5_support" = "xyes"; then
    AC_DEFINE(_LATIN5_SUPPORT)
fi

if test "x$build_latin6_support" = "xyes"; then
    AC_DEFINE(_LATIN6_SUPPORT)
fi

if test "x$build_thai_support" = "xyes"; then
    AC_DEFINE(_THAI_SUPPORT)
fi

if test "x$build_latin7_support" = "xyes"; then
    AC_DEFINE(_LATIN7_SUPPORT)
fi

if test "x$build_latin8_support" = "xyes"; then
    AC_DEFINE(_LATIN8_SUPPORT)
fi

if test "x$build_latin9_support" = "xyes"; then
    AC_DEFINE(_LATIN9_SUPPORT)
fi

if test "x$build_latin10_support" = "xyes"; then
    AC_DEFINE(_LATIN10_SUPPORT)
fi

if test "x$build_gb_support" = "xyes"; then
    AC_DEFINE(_GB_SUPPORT)
fi

if test "x$build_gbk_support" = "xyes"; then
    AC_DEFINE(_GBK_SUPPORT)
fi

if test "x$build_gb18030_support" = "xyes"; then
    AC_DEFINE(_GB18030_SUPPORT)
fi

if test "x$build_big5_support" = "xyes"; then
    AC_DEFINE(_BIG5_SUPPORT)
fi

if test "x$build_euckr_support" = "xyes"; then
    AC_DEFINE(_EUCKR_SUPPORT)
fi

if test "x$build_eucjp_support" = "xyes"; then
    AC_DEFINE(_EUCJP_SUPPORT)
fi

if test "x$build_shiftjis_support" = "xyes"; then
    AC_DEFINE(_SHIFTJIS_SUPPORT)
fi

if test "x$build_unicode_support" = "xyes"; then
    AC_DEFINE(_UNICODE_SUPPORT)
fi

if test "x$use_kbd_frpc" = "xyes"; then
    AC_DEFINE(_KBD_LAYOUT_FRPC)
fi

if test "x$use_kbd_fr" = "xyes"; then
    AC_DEFINE(_KBD_LAYOUT_FR)
fi

if test "x$use_kbd_de" = "xyes"; then
    AC_DEFINE(_KBD_LAYOUT_DE)
fi

if test "x$use_kbd_delatin1" = "xyes"; then
    AC_DEFINE(_KBD_LAYOUT_DELATIN1)
fi

if test "x$use_kbd_it" = "xyes"; then
    AC_DEFINE(_KBD_LAYOUT_IT)
fi

if test "x$use_kbd_es" = "xyes"; then
    AC_DEFINE(_KBD_LAYOUT_ES)
fi

if test "x$use_kbd_escp850" = "xyes"; then
    AC_DEFINE(_KBD_LAYOUT_ESCP850)
fi

if test "x$build_save_bitmap" = "xyes"; then
    AC_DEFINE(_SAVE_BITMAP)
else
    build_misc_savescreen="no"
fi

if test "x$build_pcx_support" = "xyes"; then
    AC_DEFINE(_PCX_FILE_SUPPORT)
fi

if test "x$build_lbm_support" = "xyes"; then
    AC_DEFINE(_LBM_FILE_SUPPORT)
fi

if test "x$build_tga_support" = "xyes"; then
    AC_DEFINE(_TGA_FILE_SUPPORT)
fi

if test "x$build_gif_support" = "xyes"; then
    AC_DEFINE(_GIF_FILE_SUPPORT)
fi

if test "x$build_jpg_support" = "xyes"; then
    AC_DEFINE(_JPG_FILE_SUPPORT)
fi

if test "x$build_png_support" = "xyes"; then
    AC_DEFINE(_PNG_FILE_SUPPORT)
fi

if test "x$build_ime_gb2312" = "xyes"; then
    AC_DEFINE(_IME_GB2312)
  if test "x$build_ime_gb2312_pinyin" = "xyes"; then
    AC_DEFINE(_IME_GB2312_PINYIN)
  fi
else
    build_ime_gb2312_pinyin=no
fi

if test "x$build_misc_aboutdlg" = "xyes"; then
  if test "x$build_ctrl_button" = "xyes"; then
    AC_DEFINE(_MISC_ABOUTDLG)
  fi
fi

if test "x$build_misc_savescreen" = "xyes"; then
    AC_DEFINE(_MISC_SAVESCREEN)
fi

if test "x$build_ctrl_static" = "xyes"; then
    AC_DEFINE(_CTRL_STATIC)
fi

if test "x$build_ctrl_button" = "xyes"; then
    AC_DEFINE(_CTRL_BUTTON)
fi

if test "x$build_ctrl_simedit" = "xyes"; then
    AC_DEFINE(_CTRL_SIMEDIT)
fi

if test "x$build_ctrl_sledit" = "xyes"; then
    AC_DEFINE(_CTRL_SLEDIT)
fi

if test "x$build_ctrl_mledit" = "xyes"; then
    AC_DEFINE(_CTRL_MLEDIT)
fi

if test "x$build_ctrl_listbox" = "xyes"; then
    AC_DEFINE(_CTRL_LISTBOX)
fi

if test "x$build_ctrl_progressbar" = "xyes"; then
    AC_DEFINE(_CTRL_PROGRESSBAR)
fi

if test "x$build_ctrl_toolbar" = "xyes"; then
    AC_DEFINE(_CTRL_TOOLBAR)
fi

if test "x$build_ctrl_newtoolbar" = "xyes"; then
    AC_DEFINE(_CTRL_NEWTOOLBAR)
fi

if test "x$build_ctrl_menubutton" = "xyes"; then
    AC_DEFINE(_CTRL_MENUBUTTON)
fi

if test "x$build_ctrl_trackbar" = "xyes"; then
    AC_DEFINE(_CTRL_TRACKBAR)
fi

if test "x$build_ctrl_combobox" = "xyes"; then
    AC_DEFINE(_CTRL_COMBOBOX)
fi

if test "x$build_ctrl_propsheet" = "xyes"; then
    AC_DEFINE(_CTRL_PROPSHEET)
fi

if test "x$build_ext_ctrl_monthcal" = "xyes"; then
    AC_DEFINE(_EXT_CTRL_MONTHCAL)
fi

if test "x$build_ext_ctrl_treeview" = "xyes"; then
    AC_DEFINE(_EXT_CTRL_TREEVIEW)
fi

if test "x$build_ext_ctrl_spinbox" = "xyes"; then
    AC_DEFINE(_EXT_CTRL_SPINBOX)
fi

if test "x$build_ext_ctrl_coolbar" = "xyes"; then
    AC_DEFINE(_EXT_CTRL_COOLBAR)
fi

if test "x$build_ext_ctrl_listview" = "xyes"; then
    AC_DEFINE(_EXT_CTRL_LISTVIEW)
fi

if test "x$build_ext_ctrl_grid" = "xyes"; then
    AC_DEFINE(_EXT_CTRL_GRID)
fi

if test "x$build_ext_fullgif" = "xyes"; then
    AC_DEFINE(_EXT_FULLGIF)
fi

if test "x$build_ext_skin" = "xyes"; then
    AC_DEFINE(_EXT_SKIN)
fi

if test "x$build_libvcongui" = "xyes"; then
    AC_DEFINE(_LIB_VCONGUI)
fi

if test "x$with_gray_screen" = "xyes"; then
    AC_DEFINE(_GRAY_SCREEN)
fi

if test "x$tiny_screen_size" = "xyes"; then
    AC_DEFINE(_TINY_SCREEN)
fi

dnl ========================================================================
dnl Write output

VIDEO_CFLAGS="$CFLAGS $VIDEO_CFLAGS"
AC_SUBST(VIDEO_CFLAGS)
AC_SUBST(VIDEO_SUBDIRS)
AC_SUBST(VIDEO_DRIVERS)
AC_SUBST(SYSTEM_LIBS)

AM_CONDITIONAL(LITE_VERSION, test "x$lite_version" = "xyes")
AM_CONDITIONAL(STAND_ALONE, test "x$stand_alone" = "xyes")
AM_CONDITIONAL(USE_NEWGAL, test "x$use_newgal" = "xyes")
AM_CONDITIONAL(FLAT_WINDOW_STYLE, test "x$flat_window_style" = "xyes")
AM_CONDITIONAL(SVGALIB_ENGINE, test "x$build_svgalib_engine" = "xyes")
AM_CONDITIONAL(VGA16_GAL_ENGINE, test "x$build_vga16_gal_engine" = "xyes")
AM_CONDITIONAL(LIBGGI_ENGINE, test "x$build_libggi_engine" = "xyes")
AM_CONDITIONAL(EP7211_IAL_ENGINE, test "x$build_ep7211_ial_engine" = "xyes")
AM_CONDITIONAL(ADS_IAL_ENGINE, test "x$build_ads_ial_engine" = "xyes")
AM_CONDITIONAL(IPAQ_IAL_ENGINE, test "x$build_ipaq_ial_engine" = "xyes")
AM_CONDITIONAL(THOR_IAL_ENGINE, test "x$build_thor_ial_engine" = "xyes")
AM_CONDITIONAL(IPAQ_IAL_ENGINE, test "x$build_mpc823_ial_engine" = "xyes")
AM_CONDITIONAL(PX255B_IAL_ENGINE, test "x$build_px255b_ial_engine" = "xyes")
AM_CONDITIONAL(VR4181_IAL_ENGINE, test "x$build_vr4181_ial_engine" = "xyes")
AM_CONDITIONAL(HELIO_IAL_ENGINE, test "x$build_helio_ial_engine" = "xyes")
AM_CONDITIONAL(TFSTB_IAL_ENGINE, test "x$build_tfstb_ial_engine" = "xyes")
AM_CONDITIONAL(DUMMY_IAL_ENGINE, test "x$build_dummy_ial_engine" = "xyes")
AM_CONDITIONAL(NATIVE_GAL_ENGINE, test "x$build_native_gal_engine" = "xyes")
AM_CONDITIONAL(NATIVE_IAL_ENGINE, test "x$build_native_ial_engine" = "xyes")
AM_CONDITIONAL(RBF_SUPPORT, test "x$build_rbf_support" = "xyes")
AM_CONDITIONAL(VBF_SUPPORT, test "x$build_vbf_support" = "xyes")
AM_CONDITIONAL(TTF_SUPPORT, test "x$build_ttf_support" = "xyes")
AM_CONDITIONAL(HAS_FREETYPE2, test "x$has_freetype2" = "xyes")
AM_CONDITIONAL(TYPE1_SUPPORT, test "x$build_type1_support" = "xyes")
AM_CONDITIONAL(GB_SUPPORT, test "x$build_gb_support" = "xyes")
AM_CONDITIONAL(GBK_SUPPORT, test "x$build_gbk_support" = "xyes")
AM_CONDITIONAL(GB18030_SUPPORT, test "x$build_gb18030_support" = "xyes")
AM_CONDITIONAL(BIG5_SUPPORT, test "x$build_big5_support" = "xyes")
AM_CONDITIONAL(EUCKR_SUPPORT, test "x$build_euckr_support" = "xyes")
AM_CONDITIONAL(UJIS_SUPPORT, test "x$build_eucjp_support" = "xyes")
AM_CONDITIONAL(SHIFTJIS_SUPPORT, test "x$build_shiftjis_support" = "xyes")
AM_CONDITIONAL(PCX_FILE_SUPPORT, test "x$build_pcx_support" = "xyes")
AM_CONDITIONAL(LBM_FILE_SUPPORT, test "x$build_lbm_support" = "xyes")
AM_CONDITIONAL(TGA_FILE_SUPPORT, test "x$build_tga_support" = "xyes")
AM_CONDITIONAL(GIF_FILE_SUPPORT, test "x$build_gif_support" = "xyes")
AM_CONDITIONAL(JPG_FILE_SUPPORT, test "x$build_jpg_support" = "xyes")
AM_CONDITIONAL(PNG_FILE_SUPPORT, test "x$build_png_support" = "xyes")
AM_CONDITIONAL(IME_GB2312_SUPPORT, test "x$build_ime_gb2312" = "xyes")
AM_CONDITIONAL(IME_GB2312_PINYIN_SUPPORT, test "x$build_ime_gb2312_pinyin" = "xyes")
AM_CONDITIONAL(MISC_ABOUTDLG, test "x$build_misc_aboutdlg" = "xyes")
AM_CONDITIONAL(LIB_VCONGUI, test "x$build_libvcongui" = "xyes")

AC_OUTPUT(
Makefile
src/Makefile
src/control/Makefile
src/font/Makefile
src/font/in-core/Makefile
src/gal/Makefile
src/gal/native/Makefile
src/newgal/Makefile
src/newgal/fbcon/Makefile
src/newgal/qvfb/Makefile
src/newgal/ecoslcd/Makefile
src/newgal/dummy/Makefile
dnl src/newgal/aalib/Makefile
src/ial/Makefile
src/ial/native/Makefile
src/mybmp/Makefile
src/gdi/Makefile
src/newgdi/Makefile
src/gui/Makefile
dnl src/image/Makefile
src/ime/Makefile
src/misc/Makefile
src/main/Makefile
src/kernel/Makefile
src/server/Makefile
src/client/Makefile
src/standalone/Makefile
src/sysres/Makefile
src/include/Makefile
src/include/control/Makefile
ext/Makefile
ext/control/Makefile
ext/mywins/Makefile
ext/skin/Makefile
ext/image/Makefile
ext/include/Makefile
ext/res/Makefile
examples/Makefile
vcongui/Makefile
include/Makefile
etc/Makefile
m4/Makefile
dnl doc/Makefile
dnl doc/html/Makefile
dnl doc/man/Makefile
dnl doc/man/man3/Makefile
dnl doc/man/man5/Makefile
dnl doc/man/man7/Makefile
configs/Makefile
scripts/Makefile
scripts/lxdialog/Makefile
)

