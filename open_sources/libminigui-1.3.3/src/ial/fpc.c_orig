
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <termios.h>

#include "common.h"

#ifdef _ORION14_IAL

#include <sys/ioctl.h>
#include <sys/poll.h>
#include <linux/input.h>
#include <sys/types.h>
#include <sys/stat.h>

#include "misc.h"
#include "ial.h"
#include "keycodes.h"

static int fpc_fd = -1;
static unsigned char state[MGUI_NR_KEYS];

static void init_keymap(void)
{
	return;
}

static int mouse_update(void)
{
	return 1;
}

static void mouse_getxy (int* x, int* y)
{
}

static int mouse_getbutton(void)
{
	return 0;
}

static int keyboard_update(void)
{
	struct input_event fpc_code;

	read (fpc_fd, &fpc_code, sizeof(fpc_code));

	if (fpc_code.code && (fpc_code.code >= 0 || fpc_code.code < MGUI_NR_KEYS)) {
		state[basic_keycodes[fpc_code.code]] = fpc_code.value;
	}
	else return 0; 

	return NR_KEYS;
}

static const char * keyboard_get_fpcstate(void)
{
	return (char *)state;
}

#ifdef  _LITE_VERSION
static int wait_event (int which, int maxfd, fd_set *in, fd_set *out, fd_set *except,
		struct timeval *timeout)
#else
static int wait_event (int which, fd_set *in, fd_set *out, fd_set *except,
		struct timeval *timeout)
#endif
{
	int    e;
	fd_set rfds;

	if (!in) {
		in = &rfds;
		FD_ZERO (in);
	}

	if ((which & IAL_MOUSEEVENT || which & IAL_KEYEVENT) && fpc_fd >= 0) {
		FD_SET (fpc_fd, in);
#ifdef _LITE_VERSION
		if (fpc_fd > maxfd) maxfd = fpc_fd;
#endif
	}

#ifdef _LITE_VERSION
	e = select (maxfd + 1, in, out, except, timeout) ;
#else
	e = select (FD_SETSIZE, in, out, except, timeout) ;
#endif
	if (e < 0) 
		return -1;

	if (fpc_fd >= 0 && FD_ISSET (fpc_fd, in)) {
		FD_CLR (fpc_fd, in);
		return IAL_KEYEVENT;
	}

	return 0;
}

BOOL InitOrionInput (INPUT* input, const char* mdev, const char* mtype)
{
	int i ;

	fpc_fd = open("/dev/input/event0",O_RDWR);
	if (fpc_fd < 0)
		return FALSE;

	for (i = 0 ; i < MGUI_NR_KEYS; i++)
		state[i] = 0;

	init_keymap();

	input->update_mouse = mouse_update;
	input->get_mouse_xy = mouse_getxy;
	input->set_mouse_xy = NULL;
	input->get_mouse_button = mouse_getbutton;
	input->set_mouse_range = NULL;

	input->update_keyboard = keyboard_update;
	input->get_keyboard_state = keyboard_get_fpcstate;
	input->set_leds = NULL;
	input->wait_event = wait_event;

	return TRUE;
}

void TermOrionInput (void)
{
	if (fpc_fd >= 0) close (fpc_fd);
}

#endif /* _TFSTB_IAL */

